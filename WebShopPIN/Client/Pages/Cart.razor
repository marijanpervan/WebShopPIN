@page "/cart"
@inject ICartService CartService

<PageTitle>Shopping Cart</PageTitle>
<h3>Shopping Cart</h3>
<br />

@*Stranica za prikaz košarice i sadržaja u košarici*@

@if(cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
    {
        <div class="container">
            <div class="image-wrapper">
                <img src="@product.ImageUrl" class="image"/>
            </div>
            <div class="name">
                <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                <span>@product.ProductType</span>
                <input type="number" value="@product.Quantity" 
                @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))" 
                class="form-control input-quantity" 
                min="1">

                <button class="btn-delete" @onclick="@(() => 
                    RemoveProductFromCart(product.ProductId,product.ProductTypeId))">Remove
                </button>
            </div>
                <div class="cart-product-price"><span>$@(product.Price * product.Quantity)</span></div>
        </div>
    }
    <br>
        @*Ispis ukupne cijene proizvoda koji se trenutno nalaze u košarici*@
    <div class="total">
    <div class="cart-product-price">
            Total: <span>$@cartProducts.Sum(product => @product.Price * product.Quantity)</span>
    </div>
    </div>
</div>
}

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }
    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if ((await CartService.GetCartItems()).Count == 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
        else
        {
            cartProducts = await CartService.GetCartProducts();
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }
}
